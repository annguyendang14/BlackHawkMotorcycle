project timeline:

initial prase:
	choosing framework - laravel
	install, reading doumentation => custom registration: http://www.easylaravelbook.com/blog/2015/09/25/adding-custom-fields-to-a-laravel-5-registration-form/
	connect and modify database  => guild: https://scotch.io/tutorials/a-guide-to-using-eloquent-orm-in-laravel
	create initial database data, prepare for first testing 
First testing:p;
	database relationship
	create basic page to access each table ----------------------------------- PROJECT ARE HERE
Complex addition:
	adding event on MySQL that track time to update space avalibility
	testing that (wonder how - event need to run everyday, keep checking)
	Ecomerce - paypal for now - asking Andy for old code + figure out how to incorporate with laravel
Interface:
	Design the interface
	separate user and admin - this again mixxed up databse =..= maybe need to change it now (the database part)
		https://laracasts.com/discuss/channels/laravel/user-admin-authentication
	Client Testing???? before jumpin insert real data
	Transfer data from old app to new app
	Test Again - in a testing branch and db
Finishing up:
	Deployment - Security concern and testing
	Finished 
	
	
	Note: adding alert with option before delete stuff
	validate phone number?
	
database idea:

Space(row, col, note, user_id ,price,date_added,avalibility) x
	- avalibility 
		- updated after the day of the conference and open register
		- choice: Reserved, Available, Not Available, Registered
		- using: MySQL event scheduler
	- user_id
		- If space is available for open register or not available, user_id set to null
	
Order(order_id, user_id, payment_type, status, total_price, unpaid_price) x
	-total_price : calculate using OrderLine table, maybe using view for it
	-status: pending, void, authorized, ready_for_shipment, enroute, paid, confirmed, refunded, payment_declined, shipped, archived, awaiting_payment, partial_payment
	
SpaceOrderLine(order_id, row, col, price)
	- price to record the price at time of order, price in space is current price
	
ProductOrderLine(order_id,product_id,price)
	- price to record the price at time of order, price in product is current price

Products(product_id, description, price)
	
Date(year,coference,open_register,pre-register)
User(user_id, login, email, crypted_password, salt, first_name, last_name, middle_initial, nickname) x
Address(addr1,addr2,city,state,country,postal_code,addr_type,prefered, user_id) x
Phone(number, phone_type, prefered, user_id) x
Cart(user_id,space_id,created_at,updated_at) => this will be implemented last, when finishing the actual interface
	https://www.dunebook.com/5-ways-to-implement-shopping-cart-in-laravel/7/ => cool tutorial

	
	Model: something about mass assigment =.= not really understand just yet - but for now, dont need to guard any property
	
implement https : https://www.dunebook.com/5-best-security-tips-for-a-laravel-application/
implement admin page: http://laravelcoding.com/blog/laravel-5-beauty-starting-the-admin-area
=>
question: solved
	asking: what information you want to save for user?
		- Multiple address
		- Multiple phone
		- name
		- email
		- cart
		- company_name
		
	asking: do they sell anything else aside from conference space?
		- if Yes, how do they want to handle shipping (or pickup)
	asking: do they normally have promotional deal? - if yes, needed another table
		promotion_plan(min_quantity,discount,limit,description,discount_type, created_at, updated_at)
question: unsolved - schedule for later stage of development
	asking: behavior of note -> would it available to all user to see for each space?
		how having a note affect the process???
	asking: order transaction verification ???? how much important is this? especially with check
	
	
some useful link:
	https://stackoverflow.com/questions/34582535/laravel-5-2-use-a-string-as-a-custom-primary-key-for-eloquent-table-becomes-0
